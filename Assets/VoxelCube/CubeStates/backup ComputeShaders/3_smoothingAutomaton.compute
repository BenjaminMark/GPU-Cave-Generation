// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel simpleAutomaton

struct VoxelParticle
{
	float3 position;
	float3 velocity;
	float noise;
	int flags;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<VoxelParticle> particleBuffer;

// parameters from GPU
float deltaTime;									// Even here deltaTime is needed!
float3 target;										// Mouse position.
int targetChanged;
float targetStrengh;								// Strengh, from the inspector!
float sprayOrbRadius;
float spacing;
int cubeSize;
float3 tilePos;

//TODO: READ THIS: https://stackoverflow.com/questions/7367770/how-to-flatten-or-index-3d-array-in-1d-array
//			reverse: https://stackoverflow.com/questions/14845084/how-do-i-convert-a-1d-index-into-a-3d-index?rq=1
int coordsToIndex(int x, int y,int z){
	//Flat[x + WIDTH * (y + DEPTH * z)] = Original[x, y, z]
	
	//return x + cubeSize * (y + cubeSize * z);
	//I have moved the x y z 's around, because the formula didn't match the way I built the cube in the first place
	return x + (cubeSize) * (z + (cubeSize) * y);
	//return z + (cubeSize*tilePos[0]) * (y + (cubeSize*tilePos[2]) * x); 

}

[numthreads(32,1,1)]
void simpleAutomaton (uint3 id : SV_DispatchThreadID)
{
	if(targetChanged == 1){
		// Direction and distance to target.
		float3 dir = normalize(target - particleBuffer[id.x].position);
		float dist = distance(target, particleBuffer[id.x].position); //was float3
		particleBuffer[id.x].velocity = (targetStrengh * dir * deltaTime / dist)*100;
	}

	float threshold = 0.0f;

	//this means don't run for the nodes with no noise in them
	if(particleBuffer[id.x].flags >= -10){
	//TODO: flags 10 == wall point, flags -10 == l-system point, and -20 == nothing-no-noise-point)
	
		int sumNeighbors = 0;
		


		VoxelParticle tempPoint;
	    for(int i = -1; i <= 1; i++){
	    	for(int j = -1; j <= 1; j++){
	    		for(int k = -1; k <= 1; k++){
	    			if(!(i == 0 && j == 0 && k == 0)){
	    				tempPoint = particleBuffer[coordsToIndex((particleBuffer[id.x].position.x-tilePos[0]) / spacing + i,
	    											 			 (particleBuffer[id.x].position.y-tilePos[1]) / spacing + j, 
	    											 			 (particleBuffer[id.x].position.z-tilePos[2]) / spacing + k)
	    											  ];
	    				//this is to never map outside the edge of our cube of cubes, because it would wrap to the opposite edge
	    				if(distance(tempPoint.position, particleBuffer[id.x].position) > spacing*spacing){	
	    					tempPoint.noise = 1.0;//default 1.0;
	    					//tempPoint.noise = particleBuffer[id.x].noise;
	    				}
	    							  				  				  				  
		    			//NOTE: .noise is between 0 and 1. 
		    			//		.flags so far can be -20 (nothing), -10 (l-system) and 10 (outer wall/shell of tunnel)
		    				
		    			//sumNeighbors += tempPoint.noise;
		    				
		    			//TODO: MAKE MORE CLEVER NOISE CALCULATIONS HERE:
		    			if( tempPoint.noise > threshold){
		    				
		    				sumNeighbors++;
		    			}
		    				
		    				
		    			//this colours the points that are being sampled; for debugging.
						
						/*
						particleBuffer[coordsToIndex((particleBuffer[id.x].position.x-tilePos[0]) / spacing + i,
		    										 (particleBuffer[id.x].position.y-tilePos[1]) / spacing + j, 
		    										 (particleBuffer[id.x].position.z-tilePos[2]) / spacing + k)
		    											  ].velocity = 99999;
		    			*/
	    				
	    				
	    			}

	    		}
	    	}
	    }
	    

	    
	    //float value = sumNeighbors / 26;//8.0;
	    //16
	    /*
	    if(particleBuffer[id.x].noise > threshold && sumNeighbors > 17){ // Default 17
			particleBuffer[id.x].noise = -1.0;
		
		} else if(particleBuffer[id.x].noise <= threshold && sumNeighbors < 7){ // Default 7
			particleBuffer[id.x].noise = 1.0;
		} else if(particleBuffer[id.x].noise < threshold){
		 	particleBuffer[id.x].noise = -1.0;
		} else if(particleBuffer[id.x].noise >= threshold){
			particleBuffer[id.x].noise = 1.0;
		}
	    */
	    
	    //Benjamin, I managed to get a hollow cave out of it. To rest assured that there's no bugs anywhere in the code.
	    // Note, this works with the cellular automata running for only 1 frame (setting it to 0 in the inspector means 1 frame)
		if(sumNeighbors >= 9){ // Default 17
			particleBuffer[id.x].noise = 1;

		}else{
			particleBuffer[id.x].noise = -1;

		} 
		
		
											  

		
		
		/*
		if(particleBuffer[id.x].noise >= 0.0){
			particleBuffer[id.x].noise = 1.0;
		
		}
		*/
		/* else if( sumNeighbors < 7){ // Default 7
			particleBuffer[id.x].noise = 1.0;
		} else if(particleBuffer[id.x].noise < threshold){
		 	particleBuffer[id.x].noise = 0.0;
		} else if(particleBuffer[id.x].noise >= threshold){
			particleBuffer[id.x].noise = 1.0;
		}*/
	    
	    
	    
	    
	    /*
	    if(particleBuffer[id.x].noise > 0.5)
	    {
	    	particleBuffer[id.x].noise = 1.0;
	    } else if(particleBuffer[id.x].noise >= -1){
	    	particleBuffer[id.x].noise = 0.0;
	    				  
	    }
	    */
	    
	    //particleBuffer[coordsToIndex(particleBuffer[id.x].position.x, particleBuffer[id.x].position.y, particleBuffer[id.x].position.z)].noise = -10;
	}
	
	//making sure the coordsToIndex works
	//particleBuffer[id.x].position = particleBuffer[coordsToIndex(30, 30, 30)].position;
	
	//more debugging
	//todo: this is the correct sampling:
	//if(particleBuffer[id.x].position.y <= 30 * spacing)
	//	particleBuffer[coordsToIndex(particleBuffer[id.x].position.x/spacing, particleBuffer[id.x].position.y/spacing, 30)].velocity = 99999;
}





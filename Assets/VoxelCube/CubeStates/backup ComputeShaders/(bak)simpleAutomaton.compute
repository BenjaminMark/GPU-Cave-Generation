// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel simpleAutomaton

struct VoxelParticle
{
	float3 position;
	float3 velocity;
	float noise;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<VoxelParticle> particleBuffer;

// parameters from GPU
float deltaTime;									// Even here deltaTime is needed!
float3 target;										// Mouse position.
int targetChanged;
float targetStrengh;								// Strengh, from the inspector!
float sprayOrbRadius;


int coordsToIndex(int x, int y,int z){
	return x + y * 60 + z * 60 * 60;
}

//[numthreads(10,10,10)]
[numthreads(32,1,1)]
void simpleAutomaton (uint3 id : SV_DispatchThreadID)
{
	if(targetChanged == 1){
		// Direction and distance to target.
		float3 dir = normalize(target - particleBuffer[id.x].position);
		float dist = distance(target, particleBuffer[id.x].position); //was float3
		particleBuffer[id.x].velocity = (targetStrengh * dir * deltaTime / dist)*100;
	}

	float sumNeighbors = 0.0;

	if(id.x == 0 || id.y == 0 || id.z == 0 || id.x == 60 || id.y == 60 || id.z == 60){
		return;
	}

    for(int i = -1; i <= 1; i++){
    	for(int j = -1; j <= 1; j++){
    		for(int k = -1; k <= 1; k++){
    			if(!(i == 0 && j == 0 && k == 0)){
    				sumNeighbors += particleBuffer[coordsToIndex(id.x + i,id.y + j, id.z + k)].noise;
    			}
    		}
    	}
    }
    
    float value = sumNeighbors / 8.0;
    
    
    if(particleBuffer[coordsToIndex(id.x, id.y, id.z)].noise > 0.5){
    	particleBuffer[coordsToIndex(id.x, id.y, id.z)].noise = 1.0;
    } else if(particleBuffer[id.x].noise >= -1){
    	particleBuffer[coordsToIndex(id.x, id.y, id.z)].noise = 0.0;
    }
    
    
    //particleBuffer[coordsToIndex(id.x, id.y, id.z)].noise = -10;
}

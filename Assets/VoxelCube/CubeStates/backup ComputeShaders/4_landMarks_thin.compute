// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel landMarks
#include "noiseSimplex.cginc"

struct VoxelParticle
{
	float3 position;
	float3 velocity;
	float noise;
	float prevNoise;
	int flags;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<VoxelParticle> particleBuffer;

// parameters from GPU
float deltaTime;									// Even here deltaTime is needed!
float3 target;										// Mouse position.
int targetChanged;
float targetStrengh;								// Strengh, from the inspector!
float sprayOrbRadius;
float spacing;
int cubeSize;
float3 tilePos;
int frameNumber;
int seedMod;
float3 randomSeed;

//TODO: READ THIS: https://stackoverflow.com/questions/7367770/how-to-flatten-or-index-3d-array-in-1d-array
//			reverse: https://stackoverflow.com/questions/14845084/how-do-i-convert-a-1d-index-into-a-3d-index?rq=1
int coordsToIndex(int x, int y,int z){
	//Flat[x + WIDTH * (y + DEPTH * z)] = Original[x, y, z]
	
	//return x + cubeSize * (y + cubeSize * z);
	//I have moved the x y z 's around, because the formula didn't match the way I built the cube in the first place
	return x + (cubeSize) * (z + (cubeSize) * y);
	//return z + (cubeSize*tilePos[0]) * (y + (cubeSize*tilePos[2]) * x); 

}

float rnd(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return asfloat(seed/4294967296.0);
}

[numthreads(32,1,1)]
void landMarks (uint3 id : SV_DispatchThreadID)
{
	float threshold = 0.0;
	float anchorlimit = -0.78;
	int distTop = 0;
	int distBot = 0;
	int topOffset = 1;
	int botOffset = 1;

	if(targetChanged == 1){
		// Direction and distance to target.
		float3 dir = normalize(target - particleBuffer[id.x].position);
		float dist = distance(target, particleBuffer[id.x].position); //was float3
		particleBuffer[id.x].velocity = (targetStrengh * dir * deltaTime / dist)*100;
	}
	
	particleBuffer[id.x].noise = particleBuffer[id.x].prevNoise;
	VoxelParticle currentPoint = particleBuffer[id.x];
	

	if(frameNumber == 0){
	
		if(currentPoint.noise > threshold){
			return;
		}
		
		float freqModulator = 4.0;
		
		float3 lowFreqPoint = currentPoint.position / freqModulator;
		//lowFreqPoint.x /= freqModulator;
		//lowFreqPoint.y /= freqModulator;
		//lowFreqPoint.z /= freqModulator;
		
		float lowFreqNoise = snoise(float3(lowFreqPoint.x + randomSeed.x, lowFreqPoint.y + randomSeed.y, lowFreqPoint.z + randomSeed.z));
		if(lowFreqNoise > anchorlimit){
			return;
		}
			
			
		VoxelParticle tempPoint;
		int sumDownNeighbors = 0;
		int sumUpNeighbors = 0;
		//Down
		for(int x = -1; x <=1; x++){
			for(int z = -1; z <= 1; z++){
				tempPoint = particleBuffer[coordsToIndex((particleBuffer[id.x].position.x-tilePos[0]) / spacing + x,
	    											 	 (particleBuffer[id.x].position.y-tilePos[1]) / spacing - 1, 
	    											 	 (particleBuffer[id.x].position.z-tilePos[2]) / spacing + z)];
	    		if(tempPoint.noise > threshold){
	    			sumDownNeighbors++;
	    		}							 			 
			}
		}
	
		//up
		for(int i = -1; i <=1; i++){
			for(int j = -1; j <= 1; j++){
				tempPoint = particleBuffer[coordsToIndex((particleBuffer[id.x].position.x-tilePos[0]) / spacing + i,
	    											 	 (particleBuffer[id.x].position.y-tilePos[1]) / spacing + 1, 
	    											 	 (particleBuffer[id.x].position.z-tilePos[2]) / spacing + j)];
	    		if(tempPoint.noise > threshold){
	    			sumUpNeighbors++;
	    		}							 			 
			}
		}
		
		if((sumDownNeighbors >=  7 || sumUpNeighbors >= 7  )){
			 //Makes an anchor point.
			 
			 for(int i = -1; i <= 1; i++){
	    		for(int j = -1; j <= 1; j++){
	    			particleBuffer[coordsToIndex((particleBuffer[id.x].position.x-tilePos[0]) / spacing + i,
	    										(particleBuffer[id.x].position.y-tilePos[1]) / spacing + 0, 
	    										(particleBuffer[id.x].position.z-tilePos[2]) / spacing + j)].flags = 30;
	    			
	    			
	    			
	    		}
	    	}
	    	
	    	
	    	//currentPoint.flags = 30;
		}
	} else {
		VoxelParticle tempPoint;
		bool anchorNeighbor = false;
			
					
		tempPoint = particleBuffer[coordsToIndex((particleBuffer[id.x].position.x-tilePos[0]) / spacing,
									 			 (particleBuffer[id.x].position.y-tilePos[1]) / spacing + topOffset, 
									 			 (particleBuffer[id.x].position.z-tilePos[2]) / spacing)
									  ];
			    							  				  				  				  
		//NOTE: .noise is between -1 and 1. 
		//		.flags so far can be -20 (nothing), -10 (l-system) and 10 (outer wall/shell of tunnel)
		
		while(tempPoint.flags == 30){							  
			//this is to never map outside the edge of our cube of cubes, because it would wrap to the opposite edge
			if(distance(tempPoint.position, particleBuffer[id.x].position) > spacing*spacing){	
				//tempPoint.noise = 1.0;//default 1.0;
				//tempPoint.noise = particleBuffer[id.x].noise;
				//if( particleBuffer[id.x].noise > threshold)
					//sumNeighbors++;
				
			}
			else if( tempPoint.flags == 30){
				anchorNeighbor = true;
				distTop++;
			}
			
			topOffset++;
			
			tempPoint = particleBuffer[coordsToIndex((particleBuffer[id.x].position.x-tilePos[0]) / spacing,
									 			 (particleBuffer[id.x].position.y-tilePos[1]) / spacing + topOffset, 
									 			 (particleBuffer[id.x].position.z-tilePos[2]) / spacing)
									  ];
		}		
				
			//this colours the points that are being sampled; for debugging.
				/*
				particleBuffer[coordsToIndex((particleBuffer[id.x].position.x-tilePos[0]) / spacing + i,
										 (particleBuffer[id.x].position.y-tilePos[1]) / spacing + j, 
										 (particleBuffer[id.x].position.z-tilePos[2]) / spacing + k)
										  ].velocity = 99999;
		*/
    	
    	float coin = rnd(asuint(id.x+seedMod/2));
    	
    	
    	
    	if(anchorNeighbor && coin > 0.0){
    		currentPoint.flags = 30;
    		
    		
    		tempPoint = particleBuffer[coordsToIndex((particleBuffer[id.x].position.x-tilePos[0]) / spacing,
									 			 (particleBuffer[id.x].position.y-tilePos[1]) / spacing - botOffset, 
									 			 (particleBuffer[id.x].position.z-tilePos[2]) / spacing)
									  ];
    		
    		while(tempPoint.noise > threshold){
    			distBot++;
    			botOffset++;
    			tempPoint = particleBuffer[coordsToIndex((particleBuffer[id.x].position.x-tilePos[0]) / spacing,
									 			 (particleBuffer[id.x].position.y-tilePos[1]) / spacing - botOffset, 
									 			 (particleBuffer[id.x].position.z-tilePos[2]) / spacing)
									  ];
    		}
    		
    		float3 highFreqPos = mul(currentPoint.position, 8.0);
    		
    			float middleDist = abs(distTop - distBot)/2.0;
    			float radius = (distTop+distBot)/2.0;
    		
    			//currentPoint.prevNoise = (currentPoint.noise * -1);
    			currentPoint.prevNoise = snoise(float3(highFreqPos.x + randomSeed.x, highFreqPos.y + randomSeed.y, highFreqPos.z + randomSeed.z));
    			
    			currentPoint.prevNoise *= middleDist/radius;
    			
    			if(currentPoint.prevNoise > threshold){
    				currentPoint.prevNoise *= -1;  
    			}
    		
	    		/*
	    		for(int i = -1; i <= 1; i++){
	    			for(int j = -1; j <= 1; j++){
	    				VoxelParticle neighPoint = particleBuffer[coordsToIndex((particleBuffer[id.x].position.x-tilePos[0]) / spacing + i,
	    										(particleBuffer[id.x].position.y-tilePos[1]) / spacing + 0, 
	    										(particleBuffer[id.x].position.z-tilePos[2]) / spacing + j)];
			    		if(neighPoint.noise > threshold){
			    			neighPoint.prevNoise = (neighPoint.noise *  -1);// -0.5;
			    			
			    			 particleBuffer[coordsToIndex((particleBuffer[id.x].position.x-tilePos[0]) / spacing + i,
	    										(particleBuffer[id.x].position.y-tilePos[1]) / spacing + 0, 
	    										(particleBuffer[id.x].position.z-tilePos[2]) / spacing + j)] = neighPoint;
	    										
	    					if(i == 0 && j == 0){
	    						currentPoint = neighPoint;
	    						currentPoint.flags = 30;
	    					}
			    		}
			    	}
			    }
			    */
	    	}
	    		
		particleBuffer[id.x] = currentPoint;
	}
	
}





